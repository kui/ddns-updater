#!/bin/sh
# -*- coding:utf-8 -*-
### BEGIN INIT INFO
# Provides:          ddns-updater
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: update script for DDNS of valude domain
# Description:       Value Domain の DDNS 更新のための init.d スクリプト
### END INIT INFO

# Author: Keiichiro Ui

CMD="/usr/bin/curl -s"

DEBUG=true
DOMAIN="YOUR_DOMAIN"
PASSWD="YOUR_PASSWORD"
HOST="YOUR_HOST_NAME"
INTERVAL="120" #sec

BASE_URL="http://dyn.value-domain.com/cgi-bin/dyn.fcg"
CHECK_IP_URL="http://dyn.value-domain.com/cgi-bin/dyn.fcg?ip"
CONFIG_FILE="/etc/ddns-updater"
PID_FILE="/var/run/ddns-updater.pid"
LOG_FILE="/var/log/ddns-updater.log"

[ -f "$CONFIG_FILE" ] && . "$CONFIG_FILE"

URL="$BASE_URL?d=$DOMAIN&p=$PASSWD&h=$HOST"
MAIN_CMD="$CMD '$URL'"

echo="`which echo`"
[ -e "$echo" ] || echo="echo"
p(){
    $echo "$@"
}
d(){
    $DEBUG && p "[DEBUG] $@"
}
e(){
    p "$@" >&2
}

IP_ADDR=

update(){
    local result="`eval $MAIN_CMD`"
    if [ 0 -ne $? ]
    then
        e "$result"
        exit 1
    fi

    local status=`p "$result" | head -n1 | sed -e 's/^status=//'`
    local msg=`p "$result" | tail -n1`
    case $status in
        0)
            d "$msg"
            return 0
            ;;
        1|2|3|4|5|9)
            e "Error: $msg  (status:$status)"
            d "See http://www.value-domain.com/ddns.php?action=howto" >&2
            return 1
            ;;
        *)
            e "Error: Unexpected result. the result is the following"
            e "$result"
            return 2
            ;;
    esac
}

do_start(){

    p -n "start: "

    local pid="`get_pid`"
    if is_alive_pid "$pid"
    then
        e "FAIL"
        e "already started"
        exit 1
    fi

    local pid_file="`dirname $PID_FILE`"
    [ -e "$pid_file" ] || mkdir -p "$pid_file"
    local log_file="`dirname $LOG_FILE`"
    [ -e "$pid_file" ] || mkdir -p "$pid_file"

    if ! (touch "$LOG_FILE" && touch  "$PID_FILE")
    then
        e "FAIL"
        exit 1
    fi

    # testing
    if ! update > /dev/null
    then
        e "FAIL"
        exit 1
    fi

    p "start" | logger
    while true
    do
        if update_ip_addr | logger
        then
            update 2>&1 | logger
        fi
        sleep $INTERVAL
    done &

    p -n $! > "$PID_FILE"

    p "OK"
}

do_stop(){

    p -n "stop: "

    local pid="`get_pid`"
    if ! is_alive_pid "$pid"
    then
        e "FAIL"
        e "Error: Not started"
        exit 1
    fi

    local retry_count=30
    while [ $retry_count -gt 0 ]
    do
        kill -2 $pid
        sleep 0.03
        if ! is_alive_pid $pid
        then
            break
        fi
        local retry_count=$(($retry_count-1))
    done

    if [ $retry_count -eq 0 ] && (! kill -9 $pid)
    then
        p "FAIL"
        p "Error: Cannot killed $0 (pid: $pid)"
        exit 1
    fi
    p "stop" | logger

    p "OK"
}

do_status(){
    pid=`get_pid`
    if is_alive_pid $pid
    then
        p "Running (pid: $pid)"
    else
        p "NOT running"
    fi
}

is_alive_pid(){
    [ -n "$1" ] && [ -n "`ps -p $1 -o comm=`" ]
}

get_pid(){
    p `cat "$PID_FILE" 2> /dev/null`
}

logger(){
    local datetime="`date +'%F %T'`"
    sed -e "s/^/$datetime /" >> "$LOG_FILE"
}

update_ip_addr(){
    local ip_addr="`get_ip_addr`"
    d "IP Adder: $ip_addr"
    [ "$IP_ADDR" != "$ip_addr" ] && echo "update ip: $ip_addr"
    local result=$?
    IP_ADDR="$ip_addr"
    return $result
}

get_ip_addr(){
    ip=`eval $CMD '$CHECK_IP_URL'`

    [ $? -ne 0 ] && return 1
    [ -z "$ip" ] && return 1

    p "$ip"
}

case $1 in
    start | stop | status)
        do_$1
        ;;
    restart)
        do_stop && sleep 0.5 && do_start
        ;;
    update)
        DEBUG=true
        p "Execute \`$MAIN_CMD\`"
        update
        ;;
    ip_addr)
        get_ip_addr
        ;;
    *)
        p "$0 {start|stop|update|status}"
        ;;
esac
